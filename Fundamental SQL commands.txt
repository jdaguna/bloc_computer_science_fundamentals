1. List the commands for adding, updating, and deleting data.

INSERT INTO, UPDATE, DELETE, ALTER TABLE, DROP TABLE


2. Explain the structure for each type of command.

INSERT INTO, nameOfTable, VALUES, (row of data with each column separated by a comma)

UPDATE, nameOfTable, SET, columnName=newRowData WHERE columnName=rowData 
DELETE FROM, nameOfTable, WHERE columnName=rowData 

ALTER TABLE, nameOfTable, ADD COLUMN, newColumnName, dataType

DROP TABLE, nameOfTable

3. What are some of the data types that can be used in tables? Give a real-world example of each type.

Decimal: 100.201
Money: $100.20
Char: 'a'
Text: 'hello world'
Date: 2017-07-23

4. Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

Which data type would you use to store each of the following pieces of information?
First and last name: varchar
Whether they sent in their RSVP: char
Number of guests: smallint
Number of meals: decimal

Write a command that creates the table to track the wedding dinner.
CREATE TABLE wedding_dinner (
	name varchar,
	rsvp char(3),
	guests smallint,
	meals decimal
);

Write a command that adds a column to track whether the guest sent a thank you card.
ALTER TABLE wedding_dinner ADD COLUMN received_thank_you_card char;

You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.
ALTER TABLE wedding_dinner DROP COLUMN meals;

The guests will need a place to sit at the reception, so write a command that adds a column for table number.
ALTER TABLE wedding_dinner ADD COLUMN table_number smallint;

The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.
ALTER TABLE wedding_dinner DROP COLUMN table_number;

5. Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.
CREATE TABLE library(
	ISBN char(13),
	title varchar,
	author varchar,
	genre varchar,
	publishing_date date,
	copies smallint,
	available_copies smallint	
);

Find three books and add their information to the table.

INSERT INTO library VALUES (0747532699, 'Harry Potter and The Philosopher's Stone', 'J.K. Rowling', 'Fantasy', DATE '1997-06-26',100,99);

INSERT INTO library VALUES (0747538492, 'Harry Potter and the Chamber of Secrets', 'J.K. Rowling', 'Fantasy', DATE '1997-06-02',10,10);

INSERT INTO library VALUES (07475442155, 'Harry Potter and the Prisoner of Azkaban', 'J.K. Rowling', 'Fantasy', DATE '1999-07-08',60,45);

Someone has just checked out one of the books. Change the number of available copies to 1 fewer.

UPDATE library SET available_copies='9' where isbn='747538492';


Now one of the books has been added to the banned books list. Remove it from the table.

DELETE FROM library WHERE isbn='7475442155';

6. Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and its approximate miles from Earth. 

CREATE TABLE spacecrafts (
	name varchar,
	launch_year smallint,
	country_origin varchar,
	mission_description text,
	orbiting_body varchar,
	operational char(3),
	distance_from_earth bigint
);


In addition to the table creation, provide commands that perform the following operations:
Add three non-Earth-orbiting satellites to the table.

INSERT INTO spacecrafts VALUES ('Mars-2',1971, 'USSR', 'find location for new colony for USSR citizens', 'Mars', 'no', 33900321);

INSERT INTO spacecrafts VALUES ('2001 Mars Odyssey', 2001, 'USA', 'detect evidence of past or present water and ice', 'Mars', 'yes', 33900411); 

INSERT INTO spacecrafts VALUES ('MARs Express', 2003, 'Russia', 'explore mars', 'Mars', 'yes', 33900212);

Remove one of the satellites from the table since it has just crashed into the planet.

DELETE FROM spacecrafts WHERE name='Mars-2';

Edit another satellite because it is no longer operating and change the value to reflect that.

UPDATE spacecrafts SET operational='no' WHERE name='2001 Mars Odyssey';

7. Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. 

CREATE TABLE emails(
	id smallint,
	subject line varchar,
	sender varchar,
	additional_recipients text,
	body text,
	timestamp timestamp,
	read char(3),
	id_email_chain smallint
);


Also provide commands that perform the following operations:
Add three new emails to the inbox.

INSERT INTO emails VALUES (1843, 'hello world', 'Josh Daguna', '', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nib.', TIMESTAMP '2014-02-04 21:34:32', ‘yes',4656);

INSERT INTO emails VALUES (3243, 'DELETE THIS', 'Jason Braxter', 'Josh Daguna, Bob Norton', 'Sed nisi. Nulla quis sem at nib.', TIMESTAMP '2018-08-08 23:44:26', 'no', 986);
INSERT INTO emails VALUES (5213, 'Visa Fraud Attempt', 'VISA Security', '', 'Attempted Breach into account.', TIMESTAMP '2019-05-09 12:34:16', 'yes', 1932);

You deleted one of the emails, so write a command to remove the row from the inbox table.

DELETE FROM emails WHERE id=3243;

You started reading an email but just heard a crash in another room. Mark the email as unread before investigating the crash, so you can come back and read it later.

UPDATE emails SET read='no' WHERE id=5213;
